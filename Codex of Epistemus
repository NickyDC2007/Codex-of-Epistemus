#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>
#include <windows.h>

#define PAREDE 0
#define GRAMA 1
#define TERRA 2
#define TELHADO_SE 3
#define TELHADO_SD 4
#define TELHADO_IE 5
#define TELHADO_ID 6
#define TELHADO_VERTICAL 7
#define TELHADO_HORIZONTAL 8
#define AGUA 9
#define NULO 10
#define PORTA 11
#define MEIA_PORTA 12
#define CASA_CHAO 13
#define TAPETE 14
#define NPC_Q1 15
#define PEDRA 16
#define ESPINHO 17
#define GELO 18

int limpar_tela = 0;

int nadar = 0;
int flor = 0;

int checar_vila = 0;
int checar_fase_1 = 0;
int checar_fase_2 = 0;

void gotoxy(int x, int y) 
{
    COORD coordenada;
    coordenada.X = x;
    coordenada.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coordenada);
}

void limpar_goto(int mapa,int h[2])
{
    switch (mapa)
    {
    case 1:
        if (limpar_tela != 0)
        {
        gotoxy(0,2);
        printf("                                                    \033[1;32m[ Vila Miralume ]\033[0m                                                   ");
        gotoxy(h[0] + 2,h[1]);
        }
        break;
    case 2:
        break;
    case 5:
        if (limpar_tela != 0)
        {
        gotoxy(0,2);
        printf("                                               \033[0;31m[ Casa do Antigo Guardi√£o ]\033[0m                                              ");
        gotoxy(h[0] + 2,h[1]);
        }
        break;
    }
    
    limpar_tela = 0;
}

void h_mov(int mapa_v, int heroi[2], int vila[34][20], int level_1[16][16], int level_2[22][22], int level_3[70][24], int casa_1[15][15], int casa_2[10][10])
{
    char tecla;
    int novo_x = heroi[0];
    int novo_y = heroi[1];

    tecla = _getch();

    switch (mapa_v)
    {
    case 1:
        if (tecla == 'w' || tecla == 'W' || tecla == 72)
        {    
            novo_y = heroi[1] - 1;
        }
        else if (tecla == 's' || tecla == 'S' || tecla == 80)
        {
            novo_y = heroi[1] + 1;
        }
        else if (tecla == 'd' || tecla == 'D' || tecla == 77)
        {
            novo_x = heroi[0] + 2;
        }
        else if (tecla == 'a' || tecla == 'A' || tecla == 75)
        {
            novo_x = heroi[0] - 2;
        }

        if (novo_x < 28 || novo_x > 90 || novo_y < 5 || novo_y > 23)
        {
            return;
        }

        int matriz_x_v = (novo_x - 26) / 2;
        int matriz_y_v = novo_y - 5;
        
        if (matriz_x_v >= 0 && matriz_x_v < 34 && matriz_y_v >= 0 && matriz_y_v < 20)
        {
            int tipo_bloco = vila[matriz_x_v][matriz_y_v];
            int blocos_bloqueados[] = {PAREDE, TELHADO_VERTICAL, TELHADO_HORIZONTAL, TELHADO_IE, TELHADO_SE, TELHADO_ID, TELHADO_SD, PORTA, MEIA_PORTA, AGUA};

            switch (nadar)
            {
            case 1:
                blocos_bloqueados[10] = NULO;
                break;
            }

            int pode_mover = 1;

            for (int i = 0; i < 10; i++)
            {
                if (tipo_bloco == blocos_bloqueados[i])
                {
                    pode_mover = 0;
                    break;
                }
            }

            if (pode_mover)
            {
                heroi[0] = novo_x;
                heroi[1] = novo_y;
            }
        }
        break;
    case 2:
        if (tecla == 'w' || tecla == 'W' || tecla == 72)
        {    
            novo_y = heroi[1] - 1;
        }
        else if (tecla == 's' || tecla == 'S' || tecla == 80)
        {
            novo_y = heroi[1] + 1;
        }
        else if (tecla == 'd' || tecla == 'D' || tecla == 77)
        {
            novo_x = heroi[0] + 2;
        }
        else if (tecla == 'a' || tecla == 'A' || tecla == 75)
        {
            novo_x = heroi[0] - 2;
        }

        if (novo_x < 46 || novo_x > 72 || novo_y < 8 || novo_y > 23)
        {
            return;
        }

        int matriz_x_l1= (novo_x - 44) / 2;
        int matriz_y_l1 = novo_y - 7;
        
        if (matriz_x_l1 >= 0 && matriz_x_l1 < 16 && matriz_y_l1 >= 0 && matriz_y_l1 < 16)
        {
            int tipo_bloco = level_1[matriz_x_l1][matriz_y_l1];
            int blocos_bloqueados[] = {PAREDE, AGUA};

            switch (nadar)
            {
            case 1:
                blocos_bloqueados[2] = NULO;
                break;
            }

            int pode_mover = 1;

            for (int i = 0; i < 2; i++)
            {
                if (tipo_bloco == blocos_bloqueados[i])
                {
                    pode_mover = 0;
                    break;
                }
            }

            if (pode_mover)
            {
                heroi[0] = novo_x;
                heroi[1] = novo_y;
            }
        }
        break;
    case 3:
        if (tecla == 'w' || tecla == 'W' || tecla == 72)
        {    
            novo_y = heroi[1] - 1;
        }
        else if (tecla == 's' || tecla == 'S' || tecla == 80)
        {
            novo_y = heroi[1] + 1;
        }
        else if (tecla == 'd' || tecla == 'D' || tecla == 77)
        {
            novo_x = heroi[0] + 2;
        }
        else if (tecla == 'a' || tecla == 'A' || tecla == 75)
        {
            novo_x = heroi[0] - 2;
        }

        if (novo_x < 38 || novo_x > 82 || novo_y < 5 || novo_y > 27)
        {
            return;
        }

        int matriz_x_l2= (novo_x - 36) / 2;
        int matriz_y_l2 = novo_y - 5;
        
        if (matriz_x_l2 >= 0 && matriz_x_l2 < 22 && matriz_y_l2 >= 0 && matriz_y_l2 < 22)
        {
            int tipo_bloco = level_2[matriz_x_l2][matriz_y_l2];
            int blocos_bloqueados[] = {PAREDE, AGUA};

            switch (nadar)
            {
            case 1:
                blocos_bloqueados[2] = NULO;
                break;
            }

            int pode_mover = 1;

            for (int i = 0; i < 2; i++)
            {
                if (tipo_bloco == blocos_bloqueados[i])
                {
                    pode_mover = 0;
                    break;
                }
            }

            if (pode_mover)
            {
                heroi[0] = novo_x;
                heroi[1] = novo_y;
            }
        }
        break;
    case 5:
        if (tecla == 'w' || tecla == 'W' || tecla == 72)
        {    
            novo_y = heroi[1] - 1;
        }
        else if (tecla == 's' || tecla == 'S' || tecla == 80)
        {
            novo_y = heroi[1] + 1;
        }
        else if (tecla == 'd' || tecla == 'D' || tecla == 77)
        {
            novo_x = heroi[0] + 2;
        }
        else if (tecla == 'a' || tecla == 'A' || tecla == 75)
        {
            novo_x = heroi[0] - 2;
        }

        if (novo_x < 44 || novo_x > 72 || novo_y < 7 || novo_y > 21)
        {
            return;
        }

        int matriz_x_casa1= (novo_x - 44) / 2;
        int matriz_y_casa1 = novo_y - 7;
        
        if (matriz_x_casa1 >= 0 && matriz_x_casa1 < 15 && matriz_y_casa1 >= 0 && matriz_y_casa1 < 15)
        {
            int tipo_bloco = casa_1[matriz_x_casa1][matriz_y_casa1];
            int blocos_bloqueados[] = {TELHADO_HORIZONTAL, TELHADO_VERTICAL, PORTA, MEIA_PORTA};

            int pode_mover = 1;

            for (int i = 0; i < 4; i++)
            {
                if (tipo_bloco == blocos_bloqueados[i])
                {
                    pode_mover = 0;
                    break;
                }
            }

            if (pode_mover)
            {
                heroi[0] = novo_x;
                heroi[1] = novo_y;
            }
        }
        break;
    }
}

void hero(int h[2])
{
    gotoxy(h[0], h[1]);
    printf(" \033[1;37mH\033[0m");
}

void n_gelo(int x, int y, int fase_2[22][22])
{
    int espinhos = rand() % 30;

    if (espinhos == 0)
    {
        fase_2[x][y] = ESPINHO;
    }
    else
    {
        fase_2[x][y] = GELO;
    }
}

void n_pedra(int x, int y, int fase_1[16][16])
{
    int espinhos = rand() % 10000;

    if (espinhos == 0)
    {
        fase_1[x][y] = ESPINHO;
    }
    else
    {
        fase_1[x][y] = PEDRA;
    }
}

void n_dentrocasa(int casas, int x, int y, int casa[15][15])
{
    switch (casas)
    {
    case 1:
        if (x == 8 && y == 14)
        {
            casa[x][y] = PORTA;
        }
        else if (x == 7 && y == 14)
        {
            casa[x][y] = MEIA_PORTA;
        }
        else if (x == 0 && y == 0)
        {
            casa[x][y] = TELHADO_SE;
        }
        else if (x == 0 && y == 14)
        {
            casa[x][y] = TELHADO_IE;
        }
        else if (x == 14 && y == 0)
        {
            casa[x][y] = TELHADO_SD;
        }
        else if (x == 14 && y == 14)
        {
            casa[x][y] = TELHADO_ID;
        }
        else if (x == 0 || x == 14)
        {
            casa[x][y] = TELHADO_VERTICAL;
        }
        else if (y == 0 || y == 14)
        {
            casa[x][y] = TELHADO_HORIZONTAL;
        }
        else
        {
            casa[x][y] = CASA_CHAO;
        }
        break;
    }
}

void n_void(int x, int y, int vila[34][20])
{
    if (x == 33 && y >= 8 && y <= 11)
    {
        vila[x][y] = NULO;
    }
}

void n_lago(int x, int y, int vila[34][20])
{
    if((x >= 12 && x <= 32 && y >= 15 && y <= 17) || (((x >= 13 && x <= 14) || (x >= 20 && x <= 27) || (x >= 31 && x <= 32)) && y == 13) || (((x >= 13 && x <= 16) || (x >= 18 && x <= 27) || (x >= 30 && x <= 32)) && y == 14) || (((x >= 15 && x <= 18) || (x >= 21 && x <= 23) || (x >= 28 && x <= 31)) && y == 18))
    {
        vila[x][y] = AGUA;
    }
}

void n_terra(int x, int y, int vila[34][20])
{
    if ((y >= 8 && y <= 11) || (x >= 5 && x <=7 && y >= 7 && y <= 12) || (x >= 22 && x <= 24 && y >= 6 && y <= 7))
    {
        vila[x][y] = TERRA;
    }
}

void n_casa(int casa, int x, int y, int vila[34][20])
{
    switch (casa)
    {
    case 1:
        if (x >= 3 && x <= 9 && y >= 2 && y <= 6)
        {
            if (x == 6 && y == 6)
            {
                vila[x][y] = PORTA;
            }
            else if (x == 7 && y == 6)
            {
                vila[x][y] = MEIA_PORTA;
            }
            else if ((x == 3 && y == 2) || (x == 4 && y == 3))
            {
                vila[x][y] = TELHADO_SE;
            }
            else if ((x == 9 && y == 2) || (x == 8 && y == 3))
            {
                vila[x][y] = TELHADO_SD;
            }
            else if ((x == 3 && y == 6) || (x == 4 && y == 5))
            {
                vila[x][y] = TELHADO_IE;
            }
            else if ((x == 9 && y == 6) || (x == 8 && y == 5))
            {
                vila[x][y] = TELHADO_ID;
            }
            else if ((x == 3 && y >= 3 && y <= 5) || (x == 4 && y == 4) || (x == 8 && y == 4) || (x == 9 && y >= 3 && y <= 5))
            {
                vila[x][y] = TELHADO_VERTICAL;
            }
            else
            {
                vila[x][y] = TELHADO_HORIZONTAL;
            }
        }
        break;
    case 2:
        if (x >= 20 && x <= 26 && y >= 2 && y <= 5)
        {
            if (x == 23 && y == 5)
            {
                vila[x][y] = PORTA;
            }
            else if (x == 24 && y == 5)
            {
                vila[x][y] = MEIA_PORTA;
            }
            else if ((x == 20 && y == 2) || (x == 21 && y == 3))
            {
                vila[x][y] = TELHADO_SE;
            }
            else if ((x == 26 && y == 2) || (x == 25 && y == 3))
            {
                vila[x][y] = TELHADO_SD;
            }
            else if ((x == 20 && y == 5) || (x == 21 && y == 4))
            {
                vila[x][y] = TELHADO_IE;
            }
            else if ((x == 26 && y == 5) || (x == 25 && y == 4))
            {
                vila[x][y] = TELHADO_ID;
            }
            else if ((x == 20 && y >= 3 && y <= 5) || (x == 21 && y == 4) || (x == 25 && y == 3) || (x == 26 && y >= 3 && y <= 5))
            {
                vila[x][y] = TELHADO_VERTICAL;
            }
            else if(x == 2 && y == 2)
            {
                vila[x][y] = NPC_Q1;
            }
            else if (x >= 1 && x <= 3 && y >= 1 && y <= 1)
            {
                vila[x][y] = TAPETE;
            }
            else
            {
                vila[x][y] = TELHADO_HORIZONTAL;
            }
        }
        break;
    case 3:
        if (x >= 3 && x <= 9 && y >= 13 && y <= 17)
        {
            if (x == 6 && y == 13)
            {
                vila[x][y] = PORTA;
            }
            else if (x == 7 && y == 13)
            {
                vila[x][y] = MEIA_PORTA;
            }
            else if ((x == 3 && y == 13) || (x == 4 && y == 14))
            {
                vila[x][y] = TELHADO_SE;
            }
            else if ((x == 9 && y == 13) || (x == 8 && y == 14))
            {
                vila[x][y] = TELHADO_SD;
            }
            else if ((x == 3 && y == 17) || (x == 4 && y == 16))
            {
                vila[x][y] = TELHADO_IE;
            }
            else if ((x == 9 && y == 17) || (x == 8 && y == 16))
            {
                vila[x][y] = TELHADO_ID;
            }
            else if ((x == 3 && y >= 14 && y <= 16) || (x == 4 && y == 15) || (x == 8 && y == 15) || (x == 9 && y >= 14 && y <= 16))
            {
                vila[x][y] = TELHADO_VERTICAL;
            }
            else
            {
                vila[x][y] = TELHADO_HORIZONTAL;
            }
        }
        break;
    }
}

void n_grama(int x, int y, int vila[34][20])
{
    vila[x][y] = GRAMA;
}

void definir_fase_2(int fase_2[22][22])
{
    for (int y = 1; y < 21; y++)
    {
        for (int x = 1; x < 21; x++)
        {
            n_gelo(x, y, fase_2);
        }
    }
}

void printar_fase_2(int variavel, int fase_2[22][22], int h_ant_fase_2[2])
{
    char gelo[3] = {'^',',','v'};
 
    switch (variavel)
    {
    case 1:
        system("cls");
        printf("\n\n\n\n\n");
        for (int y = 0; y < 22; y++)
        {
            printf("                                     ");
            for (int x = 0; x < 22; x++)
            {
                if (fase_2[x][y] == PAREDE)
                {
                    printf(" \033[0;;36m#\033[0m");
                }
                else if(fase_2[x][y] == GELO)
                {
                    printf(" \033[1;36m%c\033[0m", gelo[rand() % 3]);
                }
                else if(fase_2[x][y] == ESPINHO)
                {
                    printf(" \033[1;34m*\033[0m");
                }
            }
            printf("\n");
        }
        break;
    case 2:
        if(fase_2[h_ant_fase_2[0] / 2 - 18][h_ant_fase_2[1] - 5] == PAREDE)
        {
            printf(" \033[0;;36m#\033[0m");
        }
        else if(fase_2[h_ant_fase_2[0] / 2 - 18][h_ant_fase_2[1] - 5] == GELO)
        {
            printf(" \033[1;36m%c\033[0m", gelo[rand() % 3]);
        }
        else if(fase_2[h_ant_fase_2[0] / 2 - 18][h_ant_fase_2[1] - 5] == ESPINHO)
        {
            printf(" \033[1;34m*\033[0m");
        }
        break;
    }
}

void fase_2()
{
    int fase_2[22][22] = {0};

    int h_fase_2[2] = {39,14};
    int h_ant_fase_2[2] = {39,14};

    int r_fase_2 = 0;

    limpar_tela = 1;

    Recarregar_fase_2:
    checar_fase_2 = r_fase_2;

    definir_fase_2(fase_2);
    printar_fase_2(1, fase_2, h_ant_fase_2);

    hero(h_fase_2);

    while (1)
    {
        if (checar_fase_2 != r_fase_2)
        {
            goto Recarregar_fase_2;
        }

        limpar_goto(3, h_fase_2);

        h_ant_fase_2[0] = h_fase_2[0];
        h_ant_fase_2[1] = h_fase_2[1];

        h_mov(3, h_fase_2, NULL, NULL, fase_2, NULL, NULL, NULL);

        gotoxy(h_ant_fase_2[0], h_ant_fase_2[1]);
        printar_fase_2(2, fase_2, h_ant_fase_2);

        hero(h_fase_2);
    }
    
}

void definir_fase_1(int fase_1[16][16])
{
    for (int y = 1; y < 15; y++)
    {
        for (int x = 1; x < 15; x++)
        {
            n_pedra(x, y, fase_1);
        }
    }
}

void printar_fase_1(int variavel, int fase_1[16][16], int h_ant_fase_1[2])
{
    char pedra[3] = {'.',',',';'};
 
    switch (variavel)
    {
    case 1:
        system("cls");
        printf("\n\n\n\n\n\n\n");
        for (int y = 0; y < 16; y++)
        {
            printf("                                            ");
            for (int x = 0; x < 16; x++)
            {
                if (fase_1[x][y] == PAREDE)
                {
                    printf(" \033[38;5;245m#\033[0m");
                }
                else if(fase_1[x][y] == PEDRA)
                {
                    printf(" \033[0;38m%c\033[0m", pedra[rand() % 3]);
                }
                else if(fase_1[x][y] == ESPINHO)
                {
                    printf(" \033[1;38m*\033[0m");
                }
            }
            printf("\n");
        }
        break;
    case 2:
        if(fase_1[h_ant_fase_1[0] / 2 - 22][h_ant_fase_1[1] - 7] == PAREDE)
        {
            printf(" \033[38;5;245m#\033[0m");
        }
        else if(fase_1[h_ant_fase_1[0] / 2 - 22][h_ant_fase_1[1] - 7] == PEDRA)
        {
            printf(" \033[0;38m%c\033[0m", pedra[rand() % 3]);
        }
        else if(fase_1[h_ant_fase_1[0] / 2 - 22][h_ant_fase_1[1] - 7] == ESPINHO)
        {
            printf(" \033[1;38m*\033[0m");
        }
        break;
    }
}

void fase_1()
{
    int fase_1[16][16] = {0};

    int h_fase_1[2] = {46,13};
    int h_ant_fase_1[2] = {46,13};

    int r_fase_1 = 0;

    limpar_tela = 1;

    Recarregar_fase_1:
    checar_fase_1 = r_fase_1;

    definir_fase_1(fase_1);
    printar_fase_1(1, fase_1, h_ant_fase_1);

    hero(h_fase_1);

    while (1)
    {
        if (checar_fase_1 != r_fase_1)
        {
            goto Recarregar_fase_1;
        }

        limpar_goto(2, h_fase_1);

        h_ant_fase_1[0] = h_fase_1[0];
        h_ant_fase_1[1] = h_fase_1[1];

        h_mov(2, h_fase_1, NULL, fase_1, NULL, NULL, NULL, NULL);

        gotoxy(h_ant_fase_1[0], h_ant_fase_1[1]);
        printar_fase_1(2, fase_1, h_ant_fase_1);

        hero(h_fase_1);
    }
    
}

void definir_casa(int casas, int casa[15][15])
{
    switch (casas)
    {
    case 1:
        for (int y = 0; y < 15; y++)
        {
            for (int x = 0; x < 15; x++)
            {
                n_dentrocasa(1, x, y, casa);
            }
        }
        break;
    case 2:

        

        break;
    }
}

void printar_casa(int casas, int variavel, int casa[15][15], int h_ant_casa[2])
{
    switch (casas)
    {
    case 1:
        switch (variavel)
        {
        case 1:
            system("cls");
            printf("\n\n\n\n\n\n\n");

            for (int y = 0; y < 15; y++)
            {
                printf("                                             ");
                for (int x = 0; x < 15; x++)
                {
                    if(casa[x][y] == PORTA)
                    {
                        printf("\033[1;33m=\033[0;31m-\033[0m");
                    }
                    else if(casa[x][y] == MEIA_PORTA)
                    {
                        printf("\033[1;33m==\033[0m");
                    }
                    else if(casa[x][y] == TELHADO_SE)
                    {
                        printf(" \033[0;31m‚îå\033[0m");
                    }
                    else if(casa[x][y] == TELHADO_SD)
                    {
                        printf(" \033[0;31m‚îê\033[0m");
                    }
                    else if(casa[x][y] == TELHADO_IE)
                    {
                        printf(" \033[0;31m‚îî\033[0m");
                    }
                    else if(casa[x][y] == TELHADO_ID)
                    {
                        printf(" \033[0;31m‚îò\033[0m");
                    }
                    else if(casa[x][y] == TELHADO_VERTICAL)
                    {
                        printf(" \033[0;31m‚îÇ\033[0m");
                    }
                    else if(casa[x][y] == TELHADO_HORIZONTAL)
                    {
                        printf(" \033[0;31m‚îÄ\033[0m");
                    }
                    else if(casa[x][y] == CASA_CHAO)
                    {
                        printf(" \033[1;31m=\033[0m");
                    }
                }
                printf("\n");
            }
            break;
        case 2:
            if(casa[h_ant_casa[0] / 2 - 22][h_ant_casa[1] - 7] == CASA_CHAO)
            {
                printf(" \033[1;31m=\033[0m");
            }
            break;
        }
        break;
    case 2:
        switch (variavel)
        {
        case 1:
            
            break;
        case 2:

            break;
        }
        break;
        break;
    }
}

void casa_interior(int casas)
{
    int casa_1[15][15] = {0};
    int casa_2[15][15];

    int h_casa[2] = {59,20};
    int h_ant_casa[2] = {59,20};

    limpar_tela = 1;

    checar_vila = 1;

    switch (casas)
    {
    case 1:        
        definir_casa(1, casa_1);
        printar_casa(1, 1, casa_1, h_ant_casa);

        hero(h_casa);

        while (1)
        {
            limpar_goto(5, h_casa);

            h_ant_casa[0] = h_casa[0];
            h_ant_casa[1] = h_casa[1];

            h_mov(5, h_casa, NULL, NULL, NULL, NULL, casa_1, NULL);

            gotoxy(h_casa[0], h_casa[1]);
            printar_casa(1, 2,casa_1, h_ant_casa);

            hero(h_casa);
        }
        break;
    case 2:


        break;
    }
}

void interagir(int mapa, int pontos_i)
{
    char tecla;

    tecla = _getch();

    switch (mapa)
    {
    case 1:
        switch (pontos_i)
        {
        case 1:
            if (tecla == 'i' || tecla == 'I')
            {    
                casa_interior(1);
            }
            break;
        case 2:
            if (tecla == 'i' || tecla == 'I')
            {    
                casa_interior(2);
            }
            break;
        case 3:
            if (tecla == 'i' || tecla == 'I')
            {    
                fase_1();
            }
            break;
        }
        break;
    }
}

void interagir_vila(int h_vila[2])
{
    int pontos_i;

    if (h_vila[0] == 38 && h_vila[1] == 12)
    {
        pontos_i = 1;
        limpar_tela = 1;
    }
    else if (h_vila[0] == 72 && h_vila[1] == 11)
    {
        pontos_i = 2;
        limpar_tela = 1;
    }
    else if (h_vila[0] == 90 && (h_vila[1] >= 13 && h_vila[1] <= 16))
    {
        pontos_i = 3;
        limpar_tela = 1;
    }

    switch (pontos_i)
    {
    case 1:
        gotoxy(0,2);
        printf("                                       \033[0;37m[ Pressione a tecla \"i\" para interagir ]\033[0m                                       ");
        gotoxy(h_vila[0] + 2,h_vila[1]);
        interagir(1, 1);
        break;
    case 2:
        gotoxy(0,2);
        printf("                                       \033[0;37m[ Pressione a tecla \"i\" para interagir ]\033[0m                                       ");
        gotoxy(h_vila[0] + 2,h_vila[1]);
        break;
    case 3:
        gotoxy(0,2);
        printf("                                       \033[0;37m[ Pressione a tecla \"i\" para interagir ]\033[0m                                       ");
        gotoxy(h_vila[0] + 2,h_vila[1]);
        interagir(1, 3);
        break;
    }
}

void definir_vila(int vila[34][20])
{
    for (int y = 1; y < 19; y++)
    {
        for (int x = 1; x < 33; x++)
        {
            n_grama(x, y, vila);
            n_casa(1, x, y, vila);
            n_casa(2, x, y,vila);
            n_casa(3, x, y,vila);
            n_terra(x, y, vila);
            n_lago(x, y, vila);
        }
    }

    for (int y = 0; y < 20; y++)
    {
        for (int x = 0; x < 34; x++)
        {
            n_void(x, y ,vila);
        }
    }
    
}

void printar_vila(int variavel, int vila[34][20], int h_ant_vila[2])
{   
    char grama[5] = {'\"', '\'', ';', '^','.'};
    char terra[5] = {'~','_','-','_','_'};
    char agua[3] = {'~','~','='};

    switch (variavel)
    {
    case 1:
        system("cls");
        printf("\n\n\n\n\n");

        for (int y = 0; y < 20; y++)
        {
            printf("                          ");
            for (int x = 0; x < 34; x++)
            {
                if(vila[x][y] == PAREDE)
                {
                    printf(" \033[0;32m@\033[0m");
                }
                else if(vila[x][y] == GRAMA)
                {
                    printf(" \033[1;32m%c\033[0m", grama[rand() % 5]);
                }
                else if(vila[x][y] == TERRA)
                {
                    printf(" \033[0;33m%c\033[0m", terra[rand() % 5]);
                }
                else if(vila[x][y] == TELHADO_SE)
                {
                    printf(" \033[1;31m‚îå\033[0m");
                }
                else if(vila[x][y] == TELHADO_SD)
                {
                    printf(" \033[1;31m‚îê\033[0m");
                }
                else if(vila[x][y] == TELHADO_IE)
                {
                    printf(" \033[1;31m‚îî\033[0m");
                }
                else if(vila[x][y] == TELHADO_ID)
                {
                    printf(" \033[1;31m‚îò\033[0m");
                }
                else if(vila[x][y] == TELHADO_VERTICAL)
                {
                    printf(" \033[1;31m‚îÇ\033[0m");
                }
                else if(vila[x][y] == TELHADO_HORIZONTAL)
                {
                    printf(" \033[1;31m‚îÄ\033[0m");
                }
                else if(vila[x][y] == AGUA)
                {
                    printf(" \033[1;34m%c\033[0m", agua[rand() % 3]);
                }
                else if(vila[x][y] == NULO)
                {
                    printf(" ");
                }
                else if(vila[x][y] == PORTA)
                {
                    printf("\033[1;33m==\033[0m");
                }
                else if(vila[x][y] == MEIA_PORTA)
                {
                    printf("\033[1;33m=\033[1;31m-\033[0m");
                }
            }
            printf("\n");
        }
        break;
    case 2:
        if(vila[h_ant_vila[0] / 2 - 13][h_ant_vila[1] - 5] == PAREDE)
        {
            printf(" \033[0;32m@\033[0m");
        }
        else if(vila[h_ant_vila[0] / 2 - 13][h_ant_vila[1] - 5] == GRAMA)
        {
            printf(" \033[1;32m%c\033[0m", grama[rand() % 5]);
        }
        else if(vila[h_ant_vila[0] / 2 - 13][h_ant_vila[1] - 5] == TERRA)
        {
            printf(" \033[0;33m%c\033[0m", terra[rand() % 5]);
        }
        else if(vila[h_ant_vila[0] / 2 - 13][h_ant_vila[1] - 5] == AGUA)
        {
            printf(" \033[1;34m%c\033[0m", agua[rand() % 3]);
        }
        else if(vila[h_ant_vila[0] / 2 - 13][h_ant_vila[1] - 5] == NULO)
        {
            printf(" ");
        }
        break;
    }
}

void vila()
{
    int vila[34][20] = {0};

    int h_vila[2] = {72,12};
    int h_ant_vila[2] = {72,12};

    int r_vila = 0;

    limpar_tela = 1;

    Recarregar_vila:
    checar_vila = r_vila;

    definir_vila(vila);
    printar_vila(1, vila, h_ant_vila);

    hero(h_vila);

    while (1)
    {
        if (checar_vila != r_vila)
        {
            goto Recarregar_vila;
        }

        limpar_goto(1, h_vila);
        interagir_vila(h_vila);

        h_ant_vila[0] = h_vila[0];
        h_ant_vila[1] = h_vila[1];

        h_mov(1, h_vila, vila, NULL, NULL, NULL, NULL, NULL);

        gotoxy(h_ant_vila[0], h_ant_vila[1]);
        printar_vila(2, vila, h_ant_vila);

        hero(h_vila);
    }
}

void menu()
{
    char tecla;
    int escolha = 2;

    printf("\n\033[1;37m                                N√≠cola C. Gon√ßalves and Luca R. Bacelar evaluative roguelike\n");
    printf("\n\n                                                      C O D E X    O F\n");
    printf("\n\033[0;34m                  #######  #######   ####    ######   ########  #######  ##     ##  ##     ##   ###### ");
    printf("\n                  ##       ##    ##   ##    ##           ##     ##       ###   ###  ##     ##  ##      ");
    printf("\n                  ##       ##    ##   ##    ##           ##     ##       #### ####  ##     ##  ##      ");
    printf("\n                  ######   ########   ##     ######      ##     ######   ## ### ##  ##     ##   ###### ");
    printf("\n                  ##       ##         ##          ##     ##     ##       ##     ##  ##     ##        ##");
    printf("\n                  ##       ##         ##          ##     ##     ##       ##     ##  ##     ##        ##");
    printf("\n                  #######  ##        ####    ######      ##     #######  ##     ##   #######    ###### \033[0m");
    printf("\n\n\n\n\n");

    while (1)
    {
        if(escolha == 2)
        {
            gotoxy(0,18);
            printf("                                                     \033[107;30m     EXPLORAR     \033[0m");
        }
        else
        {
            gotoxy(0,18);
            printf("                                                          EXPLORAR     ");
        }

        if(escolha == 1)
        {
            gotoxy(0,20);
            printf("                                                     \033[107;30m      OP√á√ïES      \033[0m");
        }
        else
        {
            gotoxy(0,20);
            printf("                                                           OP√á√ïES      ");
        }

        if(escolha == 0)
        {
            gotoxy(0,22);
            printf("                                                     \033[107;30m       SAIR       \033[0m");
        }
        else
        {
            gotoxy(0,22);
            printf("                                                            SAIR       \033[0m");
        }

        printf("\n\n\n\n\n\033[0m                                             [ Pressione enter para continuar ]\033[1;37m");
            
        tecla = _getch();

        if (tecla == 'w' || tecla == 'W' || tecla == 72)
        {
            escolha++;
            if (escolha == 3)
            {
                escolha = 0;
            }
        }
        else if (tecla == 's' || tecla == 'S' || tecla == 80)
        {
            escolha--;
            if (escolha == -1)
            {
                escolha = 2;
            }
        }
        else if (tecla == 13)
        {
            switch (escolha)
            {
            case 0:
                return;
            case 1:

                break;
            case 2:
                vila();
                break;
            }
        }
    }
}

int main(void)
{
    UINT UTF8 = 65001;
    SetConsoleOutputCP(UTF8);

    srand(time(NULL));

    menu();    
    
    return 0;
}
